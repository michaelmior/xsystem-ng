/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:28.2-jre'
    implementation 'org.hibernate:hibernate-core:3.6.7.Final'

    //CSVReader/Writer dependency
    implementation 'com.opencsv:opencsv:5.2'

    //Supports tuples in Java
    implementation 'org.javatuples:javatuples:1.2'

    //Common Input-Output
    implementation 'commons-io:commons-io:2.7'

    //Data extraction from lists
    implementation group: 'commons-collections', name: 'commons-collections', version: '3.2'

    // logging
    implementation group: 'org.slf4j', name:'slf4j-api', version: '1.7.2'
    implementation group: 'org.slf4j', name:'slf4j-log4j12', version: '1.7.2'

    //JSON dependencies
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation group: 'junit', name: 'junit', version: '4.+'

    //Microbenchmarking
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.21'
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.21'
    testAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:1.21"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

test {
    useJUnit()
    testLogging {
        showStandardStreams = false
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required = false
        html.required = true
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
    }
    dependsOn test
}
